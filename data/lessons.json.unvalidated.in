[
    {
        "name": "intro",
        "desc": "Introduction",
        "available_to": ["shell", "console"],
        "entry": "hook",
        "practice": {
            "hook": {
                "task": "Hey you",
                "input": "text",
                "mapper": ["input",
                    {
                        "type": "regex",
                        "value": ".*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Yes, I'm talking to you",
                        "move_to": "choice_see_cool"
                    }
                }
            },
            "choice_see_cool": {
                "task": "Wanna see something cool?",
                "input": {
                    "type": "choice",
                    "settings": {
                        "yes": {
                            "text": "Sure, why not"
                        },
                        "no": {
                            "text": "Go away"
                        }
                    }
                },
                "mapper": ["input"],
                "effects": {
                    "yes": {
                        "reply": "Okay, here goes.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "gsettings set org.gnome.shell wobbly-effect true"
                            }
                        ],
                        "move_to": "open_move_window"
                    },
                    "no": {
                        "reply": "You're boring! Sure you don't?",
                        "move_to": "choice_see_cool"
                    }
                }
            },
            "open_move_window": {
                "task": "Open a window and move it around",
                "input": {
                    "type": "external_events",
                    "settings": {
                        "satisfied": [
                            "window-moved",
                            "open-chatbox"
                        ],
                        "unsatisfied": [
                            "open-chatbox"
                        ]
                    }
                },
                "mapper": ["input"],
                "effects": {
                    "satisfied": {
                        "reply": "Things are not as they seem around here.",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "gsettings set org.gnome.shell wobbly-effect false"
                            }
                        ],
                        "move_to": "install_programming_hook"
                    },
                    "unsatisfied": {
                        "reply": "Move a window before coming back here!",
                        "move_to": "open_move_window"
                    },
                    "timeout": {
                        "reply": "You haven't moved a window yet. Move a window and come back!",
                        "move_to": "open_move_window"
                    }
                }
            },
            "install_programming_hook": {
                "task": "You think I can teach you something cool? Try this: install-programming",
                "input": "console",
                "mapper": [
                    "input",
                    {
                        "type": "regex",
                        "value": "^install\\-programming$"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Buckle up Dorothy, because Kansas is going bye-bye!\nSee you in the 'Coding Fun' app on your desktop!",
                        "side_effects": [
                            {
                                "type": "shell",
                                "value": "echo 'Would install Programming App'"
                            },
                            {
                                "type": "unlock",
                                "value": ["showmehow"]
                            }
                        ],
                        "completes_lesson": true
                    },
                    "failure": {
                        "reply": "'install-programming' EXACTLY. I haven't got all day!"
                    }
                }
            }
        }
    },
    {
        "name": "showmehow",
        "desc": "Show me how to do things in this mysterious environment...",
        "available_to": ["console"],
        "entry": "showmehow",
        "practice": {
            "showmehow": {
                "task": "'showmehow' is a command that you can type, just like any other command. Try typing it and see what happens.",
                "input": "console",
                "mappers": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    },
                    {
                        "type": "regex",
                        "value": "Hey.*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "That's right! Though now you need to tell showmehow what task you want to try. This is called an 'argument'. Try giving showmehow an argument so that it knows what to do. Want to know what argument to give it? There's only one, and it just told you what it was.",
                        "move_to": "showmehow_argument"
                    },
                    "failure": {
                        "reply": "Nope, that wasn't what I thought would happen! Try typing just 'showmehow' and hit 'enter'. No more, no less (though surrounding spaces are okay).",
                    }
                }
            },
            "showmehow_argument": {
                "task": "Lets try giving an argument to 'showmehow'. Arguments are words that come after the main command",
                "input": "console",
                "mappers": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    },
                    {
                        "type": "regex",
                        "value": "'showmehow' is a command.*"
                    }
                ],
                "effects": {
                    "success": {
                        "reply": "Great! Now that we're done with that, maybe you can run 'showmehow' again to find out what other things you can do in this mysterious place....",
                        "unlock": ["joke", "readfile"],
                        "completes_lesson": true

                    },
                    "failure": {
                        "reply": "Hmmm. I want to know what happens when you ask how to use 'showmehow'"
                    }
                },
            }
        }
    },
    {
        "name": "joke",
        "available_to": ["console"],
        "desc": "Tell me a joke",
        "entry": "fortune",
        "practice": {
            "fortune": {
                "task": "'fortune' is a command that can tell you a joke",
                "input": "console",
                "mappers": ["shell", {
                    "type": "regex",
                    "value": ".+"
                }],
                "effects": {
                    "success": {
                        "reply": "Ha-ha. Okay, lets try something even funnier.",
                        "move_to": "fortune_cowsay"
                    },
                    "failure": {
                        "reply": "No?"
                    }
                }
            },
            "fortune_cowsay": {
                "task": "In the shell, you can pipe (|) the output of commands around into other processes. One of these processes is 'cowsay'. See what happens when you try:\n    $ fortune | cowsay",
                "input": "console",
                "mappers": ["shell", {
                    "type": "regex",
                    "value": "^.*_.*$"
                }],
                "effects": {
                    "success": {
                        "reply": "Moo! Try some more jokes in the shell!",
                        "completes_lesson": true
                    },
                    "failure": {
                        "reply": "Hmm, I thought a cow was going to say that"
                    }
                }
            }
        }
    },
    {
        "name": "readfile",
        "available_to": ["console"],
        "desc": "Read a file",
        "entry": "cat",
        "practice": {
            "cat": {
                "task": "'cat' can be used to read files on your computer. Meow! Lets read the file on your computer which says what operating system we're running. That file is found at /etc/os-release",
                "input": "console",
                "mappers": ["shell", {
                    "type": "regex",
                    "value": "NAME=.*"
                }],
                "effects": {
                    "success":{
                        "reply": "Endless OS, as epxected. Meow!",
                        "move_to": "cat_cowsay"
                    },
                    "failure": {
                        "reply": "Hmm, are you sure you're reading /etc/os-release?"
                    }
                }
            },
            "cat_cowsay": {
                "task": "And for good measure, lets get a cow to say it too.",
                "input": "console",
                "mappers": ["shell", {
                    "type": "regex",
                    "value": "^.*_.*$"
                }],
                "effects": {
                    "success": {
                        "reply": "Moo! You can read any file that is plain text using `cat`. Try it with files like /etc/resolv.conf",
                        "completes_lesson": true,
                        "unlock": ["breakit"]
                    },
                    "failure": {
                        "reply": "Did you get a cow to say what's in /etc/os-release? Try again"
                    }
                }
            }
        }
    },
    {
        "name": "breakit",
        "available_to": ["console"],
        "desc": "See how it is almost impossible to break anything",
        "entry": "breakit",
        "practice": {
            "breakit": {
                "task": "Its pretty difficult to break things on the command line. Try typing gibberish.",
                "input": "console",
                "mappers": ["shell", {
                    "type": "regex",
                    "value": ".*command.*"
                }],
                "effects": {
                    "success": {
                        "reply": "See? Harmless. Don't be afraid to try new things!",
                        "completes_lesson": true,
                        "unlock": ["changesetting"]
                    },
                    "failure": {
                        "reply": "Oops, you actually ended up running something!"
                    }
                }
            }
        }
    },
    {
        "name": "changesetting",
        "available_to": ["console"],
        "desc": "Escape the terminal and tweak the OS",
        "entry": "gsettings",
        "practice": {
            "gsettings": {
                "task": "Settings for your computer can be controlled with the `gsettings` tool. Lets find out what you can do with `gsettings`.",
                "expected": {
                    "type": "regex",
                    "value": ".*Usage.*"
                },
                "success": "The `gsettings` tool just told you about a bunch of `commands`. You can access these commands by providing the command name as an argument to `gsettings`.",
                "fail": "I thought that you were going to run `gsettings`?"
            },
            "list_schemas": {
                "task": "Lets try listing all the categories, called `schemas` on your system.",
                "expected": {
                    "type": "regex",
                    "value": "org.*"
                },
                "success": "Those are all the categories. Now lets look at settings you can tweak in your shell.",
                "fail": "Where are my settings categories? Try running the list-schemas subcommand for gsettings"
            },
            "list_keys": {
                "task": "Lets see how to use the `list-keys` subcommand. You can use the `help` command followed by a sub-command you want help for to see how to use it",
                "expected": {
                    "type": "regex",
                    "value": ".*Usage.*"
                },
                "success": "Okay, so gsettings [--schemadir SCHEMADIR] list-keys SCHEMA[:PATH] is how you do it",
                "fail": "I don't know how to use this list-keys option! Get me some help for it!"
            },
            "list_settings": {
                "task": "Now that we know how to use list-keys, lets list all the settings available on the org.gnome.shell category, or 'schema', as it is called. Pipe it to `sort` to get them in alphabetical order",
                "expected": {
                    "type": "regex",
                    "value": "^always-show-log-out$"
                },
                "success": "Interesting.... I wonder what we can play around with here...",
                "fail": "I want to know about the settings available for org.gnome.shell in sorted order? Can you list-schemas on org.gnome.shell using gsettings and then pipe (|) the output to `sort`?"
            },
            "disable_social_bar": {
                "task": "Lets disable the social bar! The social bar's setting is enable-social-bar and it is a `boolean` setting, meaning it is either 'true' or 'false'. I checked `gsettings help set` for you and it said you can use the `set` command to change a setting with gsettings [--schemadir SCHEMADIR] set SCHEMA[:PATH] KEY VALUE",
                "expected": {
                    "type": "command",
                    "value": {
                        "command": ["gsettings", "get", "org.gnome.shell", "enable-social-bar"],
                        "output_regex": "false"
                    }
                },
                "success": "There we go! No facebook icon!",
                "fail": "Hmm, I thought you'd change the value of org.gnome.shell enable-social-bar to false, but it is still true"
            },
            "enable_social_bar": {
                "task": "Now lets change it back to true",
                "expected": {
                    "type": "command",
                    "value": {
                        "command": ["gsettings", "get", "org.gnome.shell", "enable-social-bar"],
                        "output_regex": "true"
                    }
                },
                "success": "Okay, phew, facebook is back",
                "fail": "Quick! I need facebook to come back! Change enable-social-bar on org.gnome.shell back to 'true'!"
            },
            "add_terminal_pinned_help": {
                "task": "Oh I know, we should add the Terminal to your pinned apps! To do that, we can add it to the list inside of the taskbar-pins setting. But first lets see what the taskbar-pins setting looks like.",
                "expected": {
                    "type": "regex",
                    "value": ".+"
                },
                "success": "Okay, so it is a list in square brackets, where every element is surrounded by quotation marks and separated by a comma. Just like this: ['chromium-browser.desktop', 'my-other-app.desktop']",
                "fail": "You didn't show me your pinned apps!"
            },
            "add_terminal_pinned": {
                "task": "Okay, lets pin the Terminal. The Terminal's App ID is 'org.gnome.Terminal', so we should add the 'org.gnome.Terminal.desktop' entry to that list in taskbar-pins",
                "expected": {
                    "type": "command",
                    "value": {
                        "command": ["gsettings", "get", "org.gnome.shell", "taskbar-pins"],
                        "output_regex": ".*org.gnome.Terminal.*"
                    }
                },
                "success": "Sweet, looks like I'll be sticking around!",
                "fail": "I'm not there :( The Terminal's App ID is 'org.gnome.Terminal', so we should add the 'org.gnome.Terminal.desktop' entry to that list in taskbar-pins"
            }
        }
    },
    {
        "name": "playsong",
        "available_to": ["console"],
        "desc": "Play some music",
        "practice": [
            {
                "task": "Lets play some music. GStreamer is a framework that can be used to play all sorts of media files on your computer. Rythmbox and VideoNet both use it. To play a music file, just use `gst-launch-1.0`",
                "expected": {
                    "type": "regex",
                    "value": ".*"
                },
                "success": "I love this song! Now you'll probably notice that we're stuck here. To get out of any command line application, you can use Control-C",
                "fail": "We need this song to get things into the right mood. Can you play it?"
            }
        ],
        "done": "You can find some more music in ....",
        "unlocks": []
    }
]
